unbind-key C-b
set-option -g prefix C-a
bind-key C-a send-prefix

# Switch to last window
bind-key a last-window

# Start numbering at 1
set -g base-index 1
setw -g pane-base-index 1
bind-key 0 select-window -t :10

# Allows for faster key repetition
set -s escape-time 0

# mpc keybindings w/ key repeat
bind-key -r P run 'mpc -q toggle'
bind-key -r > run 'mpc -q next'
bind-key -r < run 'mpc -q prev'
bind-key N new-window -t :10 'mpd 2>/dev/null & ncmpcpp'

# Use vi keybindings in Copy mode
setw -g mode-keys vi
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi y send-keys -X copy-selection
bind-key -T copy-mode-vi r send-keys -X rectangle-toggle

# hjkl pane traversal
bind-key h select-pane -L
bind-key j select-pane -D
bind-key k select-pane -U
bind-key l select-pane -R

# pane resizing w/ key repeat
bind-key -r J resize-pane -D 5
bind-key -r K resize-pane -U 5
bind-key -r H resize-pane -L 5
bind-key -r L resize-pane -R 5

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n C-h if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n C-j if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n C-k if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n C-l if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'
bind-key -n C-\\ if-shell "$is_vim" 'send-keys C-\\' 'select-pane -l'
bind-key -T copy-mode-vi C-h select-pane -L
bind-key -T copy-mode-vi C-j select-pane -D
bind-key -T copy-mode-vi C-k select-pane -U
bind-key -T copy-mode-vi C-l select-pane -R
bind-key -T copy-mode-vi C-\\ select-pane -l
# Rebind Readline clear screen
bind-key C-l send-keys 'C-l'

# Split panes using b and v
bind-key v split-window -h
bind-key b split-window -v
unbind-key '"'
unbind-key %

# Reload config file
bind-key r source-file ~/.tmux.conf \; display-message 'Config reloaded...'

# Don't confirm killing panes and windows
bind-key x kill-pane
bind-key X kill-window
unbind-key &

# Enable mouse mode
set -g mouse on

# Keep colors pretty
set -ga terminal-overrides ',xterm-*:Tc'

# NOTE: you can use vars with $<var> and ${<var>} as long as the str is double quoted: ""
# WARNING: hex colors can't contain capital letters

# ----------------------------=== Theme ===--------------------------

# Colors
BACKGROUND=black
FOREGROUND=white
HIGHLIGHT="#C8D0E0"
ACTIVITY="#a0d0f0"

# Title
set -g set-titles on
set -g set-titles-string '#(whoami)@#H - (#S:#W.#P)'

# Panes
set -g pane-border-style fg=default
set -g pane-active-border-style fg=$HIGHLIGHT,bg=default

set -g display-panes-time 1000
set -g display-panes-colour $FOREGROUND
set -g display-panes-active-colour $HIGHLIGHT

# Clock
set -g clock-mode-colour $FOREGROUND
set -g clock-mode-style 24

# Mode
set -g mode-style bg=$HIGHLIGHT,fg=$BACKGROUND

# Windows

setw -g window-status-format " #I:#W"
setw -g window-status-style bg=default,fg=$FOREGROUND,dim
setw -g window-status-last-style fg=$FOREGROUND,bold

setw -g window-status-current-format " #I:#W"
setw -g window-status-current-style bg=default,fg=$HIGHLIGHT,bold

setw -g window-status-activity-style bg=$BACKGROUND,fg=$ACTIVITY,dim

# Base index ( start counting from 1 )
set -g base-index 1
setw -g pane-base-index 1

# Status Top
set -g status-position top

# Status Colors
set -g status-style fg=$FOREGROUND,bg=$BACKGROUND

# Status Interval
# But there is a strange bug that freezes osx
# https://github.com/tmux/tmux/issues/108
# set to 0
set -g status-interval 0

# Status contents
set -g status-left ' Ï€ '
set -g status-right '#{?client_prefix,...,} %W/52 | #S:#I.#P '

# Message
set -g message-style fg=$HIGHLIGHT,bg=$BACKGROUND,bright
